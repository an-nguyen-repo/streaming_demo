version: "3.9"

networks:
  bridge:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      bridge:
        aliases:
          - zookeeper
  kafka:
    image: confluentinc/cp-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    networks:
      bridge:
        aliases:
          - kafka 
  txn-kafka-producer:
    image: txn-kafka-producer
    depends_on:
      - kafka 
    environment:
      KAFKA_SERVER: "kafka:9092"
      ZOOKEEPER_SERVER: "zookeeper:32181"
      PRODUCER_INTERVAL: 100
    networks:
      bridge:
        aliases:
          - txn-kafka-producer
  txn-processor:
    image: txn-processor
    depends_on:
      - kafka 
    environment:
      KAFKA_SERVER: "kafka:9092"
      ZOOKEEPER_SERVER: "zookeeper:32181"
      PRODUCER_INTERVAL: 100
    networks:
      bridge:
        aliases:
          - txn-processor
  txn-score-kafka-producer:
    image: txn-score-kafka-producer
    depends_on:
      - kafka 
      - postgres
    environment:
      KAFKA_SERVER: "kafka:9092"
      ZOOKEEPER_SERVER: "zookeeper:32181"
      PRODUCER_INTERVAL: 100
    networks:
      bridge:
        aliases:
          - txn-score-kafka-producer
    
  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: frauddb
    volumes:
        - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d frauddb"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    restart: always
    ports:
      - "3001:3000"
    environment:
      GF_AUTH_DISABLE_LOGIN_FORM: "false"
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
  grafana-storage: